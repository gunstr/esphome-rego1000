esphome:
  name: heatpump-logger

esp32:
  board: esp32-evb
  framework:
    type: arduino

ethernet:
  type: LAN8720
  mdc_pin: GPIO23
  mdio_pin: GPIO18
  clk_mode: GPIO17_OUT
  phy_addr: 0
  manual_ip:
    static_ip: 192.168.0.21
    gateway: 192.168.0.1
    subnet: 255.255.255.0

logger:
  level: INFO
  baud_rate: 0

api:
  encryption:
    key: !secret ha_api_encryption_key

# The OTA configuration was changed in esphome 2024.06.
# For earlier releases the '- platform: esphome' should not be included
ota:
  - platform: esphome
    password: !secret ota_password

external_components:
  - source: components

# web_server:
#   port: 80

canbus:
  - platform: esp32_can
    id: can0
    can_id: 0
    tx_pin: GPIO5
    rx_pin: GPIO35
    bit_rate: 125kbps

climate:
  - platform: rego1000
    name: House
    rego_setpoint_variable: $ROOM_SETPOINT_BASE_TEMP
    sensor_id: indoor_temp

sensor:
  - platform: homeassistant
    entity_id: sensor.indoor_temperature
    id: indoor_temp
    accuracy_decimals: 1
  - platform: rego1000
    name: Heat Carrier 1
    rego_variable: $GT1_TEMP
    value_factor: .1
    unit_of_measurement: °C
    state_class: measurement
    accuracy_decimals: 1
  - platform: rego1000
    name: Outdoor
    rego_variable: $GT2_TEMP
    value_factor: .1
    unit_of_measurement: °C
    state_class: measurement
    accuracy_decimals: 1
  - platform: rego1000
    name: Warm water
    rego_variable: $GT3_TEMP
    value_factor: .1
    unit_of_measurement: °C
    state_class: measurement
    accuracy_decimals: 1
  - platform: rego1000
    name: Hot gas
    rego_variable: $GT6_TEMP
    value_factor: .1
    unit_of_measurement: °C
    state_class: measurement
    accuracy_decimals: 1
  - platform: rego1000
    name: Heat fluid out
    rego_variable: $GT8_TEMP
    value_factor: .1
    unit_of_measurement: °C
    state_class: measurement
    accuracy_decimals: 1
  - platform: rego1000
    name: Heat fluid in
    rego_variable: $GT9_TEMP
    value_factor: .1
    unit_of_measurement: °C
    state_class: measurement
    accuracy_decimals: 1
  - platform: rego1000
    name: Cold fluid in
    rego_variable: $GT10_TEMP
    value_factor: .1
    unit_of_measurement: °C
    state_class: measurement
    accuracy_decimals: 1
  
  # Cold fluid temperature sensors with action when passing below safe value
  - platform: rego1000
    name: Cold fluid out
    rego_variable: $GT11_TEMP
    value_factor: .1
    unit_of_measurement: °C
    state_class: measurement
    accuracy_decimals: 1
    on_value_range:
        - below: -7.8
          then:
          - switch.turn_on: ext1_block_compressor
  - platform: rego1000
    name: Heating start
    rego_variable: $HEATING_START
    value_factor: .1
    unit_of_measurement: °C
    state_class: measurement
    accuracy_decimals: 1
    on_value_range:
        - below: -5.8
          then:
          - switch.turn_on: ext1_block_compressor


  - platform: rego1000
    name: Heating stop
    rego_variable: $HEATING_STOP
    value_factor: .1
    unit_of_measurement: °C
    state_class: measurement
    accuracy_decimals: 1
  - platform: rego1000
    name: Heating setpoint
    rego_variable: $HEATING_SETPOINT
    value_factor: .1
    unit_of_measurement: °C
    state_class: measurement
    accuracy_decimals: 1
  # - platform: rego1000
  #   name: Energy output
  #   rego_variable: $STATS_ENERGY_OUTPUT
  #   value_factor: .01
  #   unit_of_measurement: kWh
  #   state_class: "total_increasing"
  #   device_class: "energy"
  #   accuracy_decimals: 2

  # Sensor for compressor operational time and estimated consumed energy
  - platform: rego1000
    id: op_time_compressor_heating
    name: OpTime compressor heating
    rego_variable: $STATS_COMPRESSOR_HEATING
    unit_of_measurement: h
    state_class: "total_increasing"
    device_class: "duration"
    filters:
    - lambda: return x / 3600.0;
    accuracy_decimals: 2
  - platform: rego1000
    id: op_time_compressor_dwh
    name: OpTime compressor dhw
    rego_variable: $STATS_COMPRESSOR_DHW
    unit_of_measurement: h
    state_class: "total_increasing"
    device_class: "duration"
    filters:
    - lambda: return x / 3600.0;
    accuracy_decimals: 2

  # Sensor for total operational time of the compressor
  - platform: template
    id: op_time_compressor
    name: opTime compressor
    unit_of_measurement: h
    state_class: "total_increasing"
    device_class: "duration"
    lambda: |-
      return (id(op_time_compressor_heating).state + id(op_time_compressor_dwh).state);
    update_interval: 60s

  # If this calculated sensor is used the COMPRESSOR_POWER should be set in the rego1000-vx.x.x.yaml file
  - platform: template
    id: energy_consumption_compressor
    name: Energy consumption compressor
    unit_of_measurement: kWh
    state_class: "total_increasing"
    device_class: "energy"
    accuracy_decimals: 2
    lambda: |-
      return (id(op_time_compressor_heating).state + id(op_time_compressor_dwh).state) * $COMPRESSOR_POWER;
    update_interval: 60s

  # Sensor for energy consumed by additional heating
  - platform: rego1000
    id: energy_consumption_add_heating
    name: Energy consumption add heating
    rego_variable: $STATS_ELECTR_ADD_HEATING
    value_factor: .001
    unit_of_measurement: kWh
    state_class: "total_increasing"
    device_class: "energy"
    accuracy_decimals: 2
  - platform: rego1000
    id: energy_consumption_add_dhw
    name: Energy consumption add dhw
    rego_variable: $STATS_ELECTR_ADD_DHW
    value_factor: .001
    unit_of_measurement: kWh
    state_class: "total_increasing"
    device_class: "energy"
    accuracy_decimals: 2
  - platform: template
    id: energy_consumption_add
    name: Energy consumption add
    unit_of_measurement: kWh
    state_class: "total_increasing"
    device_class: "energy"
    accuracy_decimals: 2
    lambda: |-
      return id(energy_consumption_add_heating).state + id(energy_consumption_add_dhw).state;
    update_interval: 60s


binary_sensor:
- platform: rego1000
  name: "Heat carrier pump"
  rego_listen_can_id: 0x00028${REGO_CAN_SUFFIX}
- platform: rego1000
  name: "Heat fluid pump"
  rego_listen_can_id: 0x0002c${REGO_CAN_SUFFIX}
- platform: rego1000
  name: "Three-way valve"
  rego_listen_can_id: 0x00038${REGO_CAN_SUFFIX}
- platform: rego1000
  name: "Additional heat"
  rego_listen_can_id: 0x0003c${REGO_CAN_SUFFIX}
- platform: rego1000
  name: "Compressor"
  rego_listen_can_id: 0x00048${REGO_CAN_SUFFIX}
- platform: rego1000
  name: "Cold fluid pump"
  rego_listen_can_id: 0x00054${REGO_CAN_SUFFIX}

number:
- platform: rego1000
  name: Hysterisis min
  rego_variable: $HEATING_1A_DIFF_MIN
  internal: true
  unit_of_measurement: °C
  min_value: 2
  max_value: 30
  step: .1
  value_factor: .1
- platform: rego1000
  name: Hysterisis max
  rego_variable: $HEATING_1A_DIFF_MAX
  internal: true
  unit_of_measurement: °C
  min_value: 2
  max_value: 30
  step: .1
  value_factor: .1
- platform: rego1000
  name: Hysterisis time factor
  rego_variable: $HEATING_1A_DIFF_CONST
  internal: true
  min_value: 10
  max_value: 30
  step: 1
  value_factor: .1
- platform: rego1000
  name: Room dial range
  rego_variable: $ROOM_DIAL_RANGE
  internal: true
  min_value: 0
  max_value: 6
  step: 1

switch:
- platform: rego1000
  name: "DHW Economy"
  rego_variable: $DHW_STATE_ECONOMY
- platform: rego1000
  name: "Admin access"
  rego_variable: $ACCESS_LEVEL

# Activate ESP32-EVB relay 1 connected to IVT External input 1 that is configured to block the compressor
# The block is deactivated after 'delay' seconds
- platform: gpio
  pin: 32
  name: "Ext1 block compressor"
  id: ext1_block_compressor
  icon: mdi:heat-pump-outline
  on_turn_on:
    then:
      - delay: 3600s
      - switch.turn_off: ext1_block_compressor

# Activate ESP32-EVB relay 2 connected to IVT External input 2 that is configured to block the additional heater
- platform: gpio
  pin: 33
  name: "Ext2 block add heater"
  id: ext2_block_add_heater
  icon: mdi:heating-coil